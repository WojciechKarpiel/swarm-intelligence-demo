cmdhistory=["(Math/atan2 1 0)" "(Math/atan 1000 1)" "(Math/atan2\\n  1000 1)" "(rand 912)" "(make-boid)" "(def q {\:a [2 3]})" "q" "(conj \:a q 11)" "(conj (\:q q) 11)" "(conj (\:a q) 11)" "(conj {} [a 3] [v 3])" "(conj {} [\:a 3] [\:v 3])" "(make-boid)" "(update-in {} [\:position] 3)" "(update-in {} [\:position] \#(conj % 2))" "(update-in {\:position []} [\:position] \#(conj % 2))" "(make-boid)" "(make-boids 34)" "(make-boids 40)" "(map \#(@%) (make-boids 19))" "(map (fn [x] @x) (make-boids 19))" "(< 213 1)" "(if {\:a 3} \:a)" "(make-boid)" "(def q (make-boids 3))" "q" "(map \#(send % (fn [a] {})))" "(map \#(send % (fn [a] {})) q)" "q" "(map \#(send-off % (fn [a] {\:a 3})) q)" "(pmap \#(send % (fn [a] {\:a 332})) q)" "(def behave [a b c] (assoc a b \\n                           c )" "(def behave [a b c] (assoc a b \\n                           c ))" "(defn behave [a b c] (assoc a b \\n                            c ))" "(pmap \#(send % behave \:q 423) q)" "q" "(dorun (pmap \#(send % behave \:qq 423) q))" "q" "boids" "(setup-boids 2)" "boids" "(filter true boids)" "(filter \#(true) boids)" "(filter \#(%) boids)" "(filter (fn [x] true) boids)" "(filter (fn [x] (>\\n                 (first (\:position @x))\\n                 50) boids)" "(filter (fn [x] (>\\n                 (first (\:position @x))\\n                 50) boids))" "(filter (fn [x] (>\\n                 (first (\:position @x))\\n                 50)) boids)" "(def ww \\n  (filter (fn [x] (>\\n                   (first (\:position @x))\\n                   50)) boids))" "ww" "(\= ww  ww)" "(def ww \\n  (filter (fn [x] (\= x ww) boids))" "(def ww \\n  (filter (fn [x] (\= x ww)) boids))" "\\n  (filter (fn [x] (\= x ww)) boids)" "ww" "(def ww \\n  (filter (fn [x] (>\\n                   (first (\:position @x))\\n                   50)) boids))" "ww" "\\n  (filter (fn [x] (\= x ww)) boids)" "boids" "ww" "boids" "\\n  (filter (fn [x] (\= x ww)) boids)" "(second boids)" "ww" "(first boids)" "\\n  (filter (fn [x] (\= x (first ww))) boids)" "(rem 100 32)" "(rem 320.342 32)" "(def www (first ww))" "www" "(alter www (fn [x] 3))" "(Math/atan2 1 0)" "(Math/atan2 111111 1\\n            )" "(Math/atan2 111111 132\\n            \\n            )" "www" "(def q {\:position [64 1] \:velocity [40 53]})" "(see-and-in-range q www)" "(def q {\:position [68 1] \:velocity [40 53]})" "(see-and-in-range q www)" "(def q {\:position [68 0] \:velocity [40 53]})" "(see-and-in-range q www)" "(first (\:position @www))" "(second (\:position @www))" "(defn tt [x1 y2 v1x v1y x2 y2]\\n  (<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1)))))" "(defn tt [x1 y2 v1x v1y x2 y2]\\n  (<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1))))))" "(defn tt [x1 y2 v1x v1y x2 y2]\\n  ((<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1))))))" "(defn tt [x1 y2 v1x v1y x2 y2]\\n  ((<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1))))))))" "(defn tt [x1 y2 v1x v1y x2 y2]\\n  ((<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1)))))))" "(defn tt [x1 y1 v1x v1y x2 y2]\\n  (<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1))))))" "(tt 0 0 1 1 2 2)" "(tt 0 0 1 1 -10 -10)" "(tt 0 0 1 1 -1000000 -10)" "(Math/atan2 10000 1)" "(Math/atan2 10010100101001 -1)" "(Math/atan2 10010100101001 -1423)" "max-angle" "(defn tt [x1 y1 v1x v1y x2 y2]\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1)))))" "(tt 0 0 1 1 -1000000 -10)" "(defn tt [x1 y1 v1x v1y x2 y2]\\n  (<\\n                        (Math/abs (- (Math/atan2 v1y v1x)\\n                                     (Math/atan2 (- y2 y1) (- x2 x1)))) max-angle\\n                        )\\n  )" "(tt 0 0 1 1 -1000000 -10)" "(tt 0 0 1 1 1 1)" "boids" "(setup-boids 10)" "www" "(process-list @www)" "(setup-boids 40)" "(process-list @www)" "(def max-distance 60)" "(def min-distance 20)" "(process-list @www)" "(first boids)" "@(first boids)" "(process-list @(first boids))" "(reduce + '\\n           ())" "(reduce + '())" "(reduce + '\\n           ())" "(process-list @(first boids))" "(cou" "(count boids)" "(/ [2 3] 2)" "(map (/ % 2) [2 3])" "(map \#(/ % 2) [2 3])" "(defn [{[x y] \:pos}] [(inc x) y])" "(defn dd \\n  [{[x y] \:pos}] [(inc x) y])" "(dd {\:pos [2 3] \:d 32})" "(behave @(first boids))" "(inc 2 43)" "(behave @(first boids))" "@(first boids)" "(behave @(first boids))" "(map \#((+ 2 (% [2 3]))) [first second])" "(map (fn [f] (+ 2 (f [2 3]))) [first second])" "(behave @(first boids))" "@(first boid)" "@(first boids)" "(behave @(first boids))" "(count boids)" "(behave @(first boids))" "boids" "(setup-boids 20)" "boids" "(count boids)" "(behave @(first boids))" "(setup-boids 20)" "(behave @(first boids))" "boids" "(def qq (process-list boid))" "(def qq (process-list boids))" "(filter \:see-and-in-range qq)" "qq" "(def qq (process-list @(first boids))" "boids" "(behave @(first boid))" "(behave @(first boids))" "(def q (process-list @(first boids)))" "q" "(min 342 3423)" "(def q (process-list @(first boids)))" "q" "(behave @(first boids))" "boids" "(behave @(first boids))" "(min 0 1(" "(min 0 1)" "(behave @(first boids))" "boids" "(first boids)" "(behave @(first boids))" "close" "(def close [1 23 5])" "( \#((if (zero? %) 1 %)) (count close))" "( \#((if (zero? %) 1 %)) 123)" "( \#((if (zero? %) 1 %)) 0)" "( (fn [m] (if (zero? m) 1 m)) 0)" "( (fn [m] (if (zero? m) 1 m)) 12)" "(behave @(first boids))" "@boids" "boids" "(behave @(second boids))" "(behave @(third boids))" "(behave @(nth boids 3))" "(behave @(second boids))" "@(second boid)" "@(second boids)" "(setup-boids 100)" "@(second boid)" "@(second boids\\n         )" "(behave @(second boids))" "(setup-boids 1000)" "(behave @(second boids))" "@(second boids)" "(behave @(second boids))" "@(second boids)" "(behave @(second boids))" "(setup-boids 30)" "(exa" "example" "(example)" "boids" "(setup-boids 10)" "(main-behave)" "(mod 243.23142 100)" "(def x 3)" "(let [x (+ 2 x)] x)" "boids" "@(first boids)" "(behave @(first boids))" "(first boids)" "(behave (first boids))" "@(first boids)" "(def q (first boids))" "q" "(behave @q)" "(main-behave)" "@boids" "boids" "(count boids)" "(main-be" "(main-behave)" "boids" "(stet" "(setu" "(setup-boids 20)" "(startsketch)" "(main-behave)" "(setup-boids 20)" "(sta" "(startsketch)" "(main-be" "(main-behave)" "boids" "(setup-boids 10)" "boids" "(star" "(startsketch)" "(main-behave)" "(setup-boids 10)" "(main-behave)" "(startsketch)" "(setup-boids 30)" "(main-behave)" "(setup-boids 10)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(startsketch)" "(send-off behaver make-them-fly)" "3" "(def running false)" "(on)" "running" "(off)" "running" "(on)" "running" "(setup-boids 20)" "(startsketch)" "(start-main-agent)" "(setup-boids 20)" "(start" "(startsketch)" "(send-off behaver make-them-fly)" "(off)" "(on)" "(setup-boids 20)" "(send-off behaver make-them-fly)" "(off)" "(setup-boids 20)" "(send-off behaver make-them-fly)" "(on)" "(send-off behaver make-them-fly)" "(on)" "(send-off behaver make-them-fly)" "(setup-boids 20)" "(send-off behaver make-them-fly)" "(setup-boids 20)" "(startsketch)" "(off)" "(setup-boids)" "(setup-boids 20\\n             )" "(def x @(first boids))" "x" "(let [[vx vy] (\:velocity x)\\n      vel-lenght (Math/sqrt (+ (* vx vx) (* vy vy)))\\n                       nx (/ vx vel-lenght)\\n                       ny  (/ vy vel-lenght)]\\n [vx vy nx ny])" "(let [[vx vy] (\:velocity x)\\n      vel-lenght (Math/sqrt (+ (* vx vx) (* vy vy)))\\n                       nx (/ vx vel-lenght)\\n                       ny  (/ vy vel-lenght)]\\n [vx vy (* 10 nx) (* 10 ny)])" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(send-off behaver make-them-fly)" "(setup-boids 20)" "(on)" "(send-off behaver make-them-fly)" "(off)" "(on)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(main-behave)" "(setup-boids 20)" "(startsketch)" "(send-off behaver make-them-fly)" "(off)" "(setup-boids 20)" "(on)" "(send-off behaver make-them-fly)" "(off)" "(on)" "(off)" "(start-graphics)" "(setup-boids 20)" "(on)" "(setup-boids 20" "(setup-boids 20)" "(start-graphics)" "(setup-boids 20)" "(on)" "(setup-boids 20)" "(setup-boids 2)" "(setup-boids 1)" "(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 60)\\n(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 60)\\n(off)" "(on)\\n(Thread/sleep 10)\\n(off)" "(on)\\n(Thread/sleep 5)\\n(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 5)\\n(off)" "(def q [\:a {2 3 \\"a\\" 3} \:b {\:2 \\"3\\"}])" "(conj q [\:a {2 3 \\"a\\" 3}])" "q" "(setup-boids 1)" "(on)\\n(Thread/sleep 5)\\n(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 5)\\n(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 5)\\n(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 5)\\n(off)" "(setup-boids 1)" "(on)\\n(Thread/sleep 5)\\n(off)" "(setup-boids 20)" "(on)" "(off)" "(class 2.3)" "(class 2.0\\n       )" "(zero? (- 2.3 2.3))" "(zero? (- 0.1 0.1))" "(start-graphics)" "(setup-boids 1)" "(on)" "(setup-boids 2)" "(setup-boids 3)" "(setup-boids 4)" "(setup-boids 7(" "(setup-boids 7)" "(setup-boids 20)" "(off)" "(setup-boids 20)" "(on)" "(off)" "(on)" "(setup-boids 20)" "(off)" "(func-first-second (fn [f] (- (f my-pos)\\n                                                                               (* weight-close (- (f other-pos) (f my-pos))\\n                                                                                  (- (/ min-distance dist) 1)))))" "(macroexpand-1 (func-first-second (fn [f] (- (f my-pos)\\n                                                                               (* weight-close (- (f other-pos) (f my-pos))\\n                                                                                  (- (/ min-distance dist) 1))))))" "(macroexpand-1 '(func-first-second (fn [f] (- (f my-pos)\\n                                                                                (* weight-close (- (f other-pos) (f my-pos))\\n                                                                                   (- (/ min-distance dist) 1))))))" "(macroexpand-1 (func-first-second (fn [f] (- (f my-pos)\\n                                                                               (* weight-close (- (f other-pos) (f my-pos))\\n                                                                                  (- (/ min-distance dist) 1))))))" "(macroexpand-1 (func-first-second qw (fn [f] (- (f my-pos)\\n                                                                                  (* weight-close (- (f other-pos) (f my-pos))\\n                                                                                     (- (/ min-distance dist) 1))))))" "(start-graphics)" "(setup-boids 20)" "(on)" "(setup-boids 20)" "(setup-boids 1)" "(setup-boids 2)" "(setup-boids 20)" "(off)" "(start-graphics)" "(setup-boids 20)" "(on)" "(setup-boids 30)" "(off)" "(start-graphics)" "(setup-boids 20)" "(on)" "(set\! boids (make-boids 20))" "(off)" "vert" "vertexes" "(reduce (fn [r n] (conj r n)) {\:a 2} '([\:b 3] [\:c 33]))" "(make-node)" "(make-node \:a 3)" "(make-node [\:a 3])" "(make-nodes 20)" "verte" "vertexes" "(rest vertexes)" "(\= nil '())" "(make-edge (first vertexes) (second vertexes))" "(list (first vertexes) (second vertexes))" "(- 456 296)" "(rand-nth vertexes)" "(conj '(2 3) '(2 3))" "(concat '(1 2 3) '(3 43 5))" "(\= \#{2 3 4} \#{ 3 2 4})" "(def q (atom '()))" "q" "(swap\! q conj 342)" "q" "(def q (atom \#{}))" "(swap\! q conj 342)" "(contains? @q 324)" "(contains? @q 342)" "(apply + '(2 3))" "verte" "vertexes" "(make-edge (second vertexes) (nth vertexes 3)\\n           )" "verte" "vertexes" "q" "(def w (atom \#{}))" "(make-edge (second vertexes) (nth vertexes 3)\\n           )" "vertexes" "(def w (atom \#{}))" "(swap\! w \#(conj % 34))" "(map (swap\! a \#(conj % 34)) [w q])" "(map (fn [a] (swap\! a \#(conj % 34))) [w q])" "(map (fn [a] (swap\! a \#(conj % 33244))) [w q])" "q" "w" "(vertexes)" "vertexes" "(defn [a1 a2] (map (fn [a] (swap\! a \#(conj % -1))) [a1 a2])\\n  )" "(defn xz [a1 a2] (map (fn [a] (swap\! a \#(conj % -1))) [a1 a2])\\n  )" "q" "w" "(xz q w)" "q" "w" "(make-edge (first vertexes) (second ver" "(make-edge (first vertexes) (second vertexes))" "(list  (first vertexes) (second vertexes))" "(make-edge (first vertexes) (second vertexes))" "(list  (first vertexes) (second vertexes))" "(swap\! (\:edges (first vertexes)) 23)" "(make-edge (first vertexes) (second vertexes))" "verte" "vertexes" "(def c @(\:edges (first vertexes)))" "c" "(make-edge (first vertexes) (second vertexes))" "vertexes" "(make-edge (first vertexes) (second vertexes))" "(swap\! (\:edges (first vertexes)) \#(conj % 2))" "vertexes" "(make-edge (first vertexes) (second vertexes))" "\\n2" "(make-edge (first vertexes) (second vertexes))" "(let [edge {\:pheromones (atom initial-pheromone) \:dist (distance node1 node2) \:nodes \#{node1 node2}}]\\n    ;(dorun (map (fn [node] (swap\! (\:edges node) \#(conj % edge))) [node1 node2]))\\n    ;;(println (\:edges node1))\\n    edge)" "q" "(make-edge (first vertexes) (second vertexes))" "(first vertexes)" "(make-edge (first vertexes) (second vertexes))" "verte" "vertexes" "(def a (first vertexes))" "(def b (second vertexes))" "a" "v" "b" "(def e (make-edge a b))" "e" "(def r (make-edge a b))" "r" "(deliver (\:edges a) (list e r))" "vertexes" "(def a (first vertexes))" "(def b (first vertexes))" "(def b (second vertexes))" "a" "v" "b" "a" "b" "(def q (make-edge a b))" "q" "(deliver (\:edges a) q)" "(def a {\:a 2 \:b (promise)})" "a" "(deliver (\:b a) 2)" "a" "(def a {\:a 2 \:b (promise)})" "(deliver (\:b a) a)" "vertexes" "(def a \#{2 3})" "(disj a 3)" "(first (disj a 3))" "(def a (first vertexes))\\n(def b (second vertexes))\\n(def c (make-edge a b))" "(def a (first vertexes))\\n(def b (second vertexes))\\n(def c (make-edge a b))\\n(def d (make-edge a b))" "a" "b" "(deliver (\:edges a {\:dest b \:info c}))" "(deliver (\:edges a) {\:dest b \:info c}))" "(deliver (\:edges a) {\:dest b \:info c})" "a" "(deliver (\:edges a) {\:dest b \:info c})" "(start-graphics)" "(setup-boids 20)" "(on)" "(off)" "(start-graphics)" "(setup-boids 20)" "(on)" "(setup-boids 40)" "(off)" "(on)" "(setup-boids 20)" "(on)" "(off)" "(on)" "(off)" "(on)" "(setup-boids 10)" "(setup-boids 30)" "(setup-boids 20)" "(on)" "(def q (make-nodes 12))" "q" "(def q (make-nodes 3))" "q" "(make-edge (first q) (second q))" "q" "(def q (atom nil))" "(def w (atom q))" "w" "(reset\! q w)" "(repeat 2 (rand\\n            ))" "vertexes" "verte" "vertexes" "(make-edge [75 18] [298 220])" "vertexes" "(make-edge [75 18] [298 220])" "vertexes" "(vertexes [54 147])" "(make-edge [41 54] [29 76])" "(vertexes )" "\\n\\nvertexes" "(make-edge [41 54] [311 238])" "\\n\\nvertexes" "(rand-nth vertexes)" "\\n\\nvertexes" "(make-edge [41 54] [311 238])" "\\n\\nvertexes" "positions" "(seq vertexes)" "(rand-nth\\n  (seq vertexes))" "(make-edge [400 0] [\\n                    241 301])" "(seq vertexes)" "(make-random-edge [115 368])" "(make-random-edge (first vertexes))" "(make-random-edge [115 368])" "(make-random-edge (first vertexes))" "vertexes" "(make-random-edge (first vertexes))" "(count \\\\(first vertexes))" "(first vertexes)" "(count @(second (first vertexes))" "(count @(second (first vertexes)))" "(make-random-edge (first vertexes))" "(doall map + (list 2  4 3  534 5 3\\n                   ))" "(doall (map + (list 324 32  5 5253)))" "(contains? 3 (doall (map + (list 324 32  5 5253))))" "(contains?  (doall (map + (list 324 32  5 5253))) 2)" "(some (\= 2 %)  (doall (map + (list 324 32  5 5253))) )" "(some %(\= 2 %)  (doall (map + (list 324 32  5 5253))) )" "(some \#(\= 2 %)  (doall (map + (list 324 32  5 5253))) )" "(some \#(\= 5\\n          \\n          %)  (doall (map + (list 324 32  5 5253))) )" "(count @(second (first vertexes)))" "vertexes" "(make-random-edge (first vertexes))" "vertexes" "(make-random-edge (first vertexes))" "(count @(second (first vertexes)))" "(make-random-edge (first vertexes))" "(count @(second (first vertexes)))" "(make-random-edges 2)" "vertexes" "(make-random-edges 1)" "vertexes" "(make-random-edges 2)" "vertexes" "(def q (atom [2 3]))" "(defn a [@[x y]] x)" "(defn a [(x y)] x)" "(defn a [(list x y)] x)" "(defn a ['(x y)] x)" "(defn a [\\n         (x y)] x)" "(case 3\\n  2 nil\\n  3 \\"elo\\")" "(case 3\\n  2 nil\\n  3 432\\n  )" "(case 312\\n  2 nil\\n  3 432\\n  \:else 43)" "(case 312\\n  2 nil\\n  3 432\\n  true 43)" "(cond (\= 2 3) 1 (\= 1 1) 23)" "(cond (\= 2 3) 1 (\= 1 1) 23 true 143)" "(cond (\= 2 3) 1 (\= 1 1432) 23 true 143)" "vertexes" "(reset start [280 53])" "(reset\! start [280 53])" "(reset\! end [495 161])" "(first vertexes)" "(first (first vertexes))" "(make-random-edges 1)" "(defn q [{\:keys [\:l \:q]}] (list l q))" "(q {\:q 2 \:l 3})" "(defn q [{l \:q}] (list l ))" "(q {\:q 2 \:l 3})" "(make-random-edges 2)" "(setup-vertexes)" "(setup-vertexes 2)" "(setup-vertexes 10)" "(setup-vertexes 3\\n                )" "(setup-vertexes 6\\n                \\n                )" "(make-random-edges 2)" "(setup-vertexes 6\\n                \\n                )" "(make-random-edges 2)" "verte" "vertexes" "(get-positions-list)" "vertexes" "(setup-vertexes 10)" "vertexes" "(make-random-edges 2)" "vertexes" "(filter \#(not (contains? '(1 2 3) %)) (list 1 2 3 4 5 6 2))" "(filter \#(not (contains? \#{1 2 3}  %)) (list 1 2 3 4 5 6 2))" "(rand 234)" "(filter \#(not (contains? \#{1 2 3}  %)) (list 1 2 3 4 5 6 2))" "(map (fn [x] (Thread/sleep 1) (println x)) (list 1 2 3))" "(dorun (map (fn [x] (Thread/sleep 1) (println x)) (list 1 2 3))\\n  )" "(doall (map (fn [x] (Thread/sleep 1) (println x)) (list 1 2 3))\\n  )" "(swap\! (\:pher (first @vertexes)) + 101)" "(swap\! (\:pher (second (first @vertexes))) + 101)" "(swap\! (\:pher @(second (first @vertexes))) + 101)" " @(second (first @vertexes))" " (swap\! (\:pher (first @(second (first @vertexes))\\n                      )) + 101)" "(setup-vertexes 10)" "(make-random-edges 2)" " (swap\! (\:pher (first @(second (first @vertexes))\\n                      )) + 101)" "(dorun (map (fn [e] (swap\! (\:pher e) + 100))\\n            (traverse-ant)))" "(traverse-ant)" "verte" "(get-positions-list)" "(get @vertexes [4 77])" "(traverse-ant)" "@start" "@end" "(traverse-ant)" "@end" "(traverse-ant)" " (swap\! (\:pher (first @(second (first @vertexes))\\n                      )) - 101)" "(traverse-ant)" "(edge-visibility {\:pos [409 80],\\n    \:pher \#<Atom@6b1a6eae\: 30.0>,\\n    \:dist 6.4031242374328485})" "(edge-visibility (first (traverse-ant)" "(edge-visibility (first (traverse-ant))" "(edge-visibility (first (traverse-ant)))" "(traverse-ant)" "(map (traverse-ant) edge-visibility)" "(map edge-visibility (traverse-ant))" "(map (traverse-ant) edge-visibility)" "(traverse-ant)" "(map (traverse-ant) edge-visibility)" "(traverse-ant)" "(map (traverse-ant) edge-visibility)" "(reward-path (traverse-ant))" "(traverse-ant)" "(reward-path (traverse-ant))" "(traverse-ant)" "(reward-path (traverse-ant))" "vertexes" "(setup-vertexes 10)" "(make-random-edges 2)" "(traverse-ant)" "edges-g" "(reward-path (traverse-ant))" "(loop [i 1000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (reward-path (traverse-ant))\\n      (recur))))" "(loop [i 1000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (reward-path (traverse-ant))\\n      (recur (dec i))))" "(loop [i 1000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (reward-path (traverse-ant))\\n      (recur (dec i)))))" "(traverse-ant)" "(loop [i 1000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 10000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(q (traverse-ant))" "(loop [i 10000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 100000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(def x \:REKT)" "(\= x \:REKT)" "(loop [i 10000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 100]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 10]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 10000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "edges-g" "(loop [i 10000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 100000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "edges-g" "(reset-pheromones)" "(loop [i 100000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(/ 1 (distance @start @end))" "(reset-pheromones)" "(loop [i 100000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "(loop [i 1000000]\\n  (if (zero? i)\\n    nil\\n    (do\\n      (q (traverse-ant))\\n      (recur (dec i)))))" "@vertexes" "(@vertexes @start)" "(range 20)" "(map \#(( Thread/sleep 1000) %)\\n     (range 20))" "(map (fn [x] ( Thread/sleep 1000))\\n     (range 20))" "(map (fn [x] (future ( Thread/sleep 1000)))\\n     (range 20))" "(dorun (map (fn [x] (future ( Thread/sleep 1000)))\\n             (range 20)))" "(doall (map (fn [x] (future ( Thread/sleep 1000)))\\n             (range 20)))" "(map \#(realized? %) (map (fn [x] (future ( Thread/sleep 1000)))\\n                         (range 20)))" "(map \#(@%) (map (fn [x] (future ( Thread/sleep 1000)))\\n                (range 20)))" "(dorun (map \#(@%) (map (fn [x] (future ( Thread/sleep 1000)))\\n                        (range 20))))" "(dorun (map \#(@%) (map (fn [x] (future ( Thread/sleep 1000) 3))\\n                        (range 20))))" "(dorun (map \#(deref %) (map (fn [x] (future ( Thread/sleep 1000) 3))\\n                             (range 20))))" "(dorun (map \#(deref %) (map (fn [x] (future ( Thread/sleep 1000) x))\\n                             (range 20))))" "(dorun (map \#(deref %) (map (fn [x] (future x)) (range 20))))" "(def q\\n     (map (fn [x] (future x)) (range 20)))" "q" "(map \#(deref %) q)" "(doall (map \#(deref %) q))" "(map \#(deref %) q)" "(repeat 3 (traverse-ant))" "(go-find-food 3 1)" "(go-find-food 3 2\\n              )" "(> nil 30" "(> nil 30)" "(reduce (fn [a b]\\n          (println a)) '())" "(reduce (fn [a b]\\n          (println a)) '(1 2))" "(reduce (fn [a b]\\n          (println a)) '(1 2 3))" "(reduce (fn [a b]\\n          (println a)) (list {\:a 3 \:b 5}\\n                             {\:a 4 \:b 6}\\n                             {\:a 2 \:b 3}))" "(reduce (fn [a b]\\n          (println a)) (list {\:a 3 \:b 5}\\n                             {\:a 4 \:b 6}\\n                             {\:a 2 \:b 3}\\n                             {}))" "(traverse-ant)" "(go-find-food 10 1)" "Math/inf" "(class 861.9421848985733)" "(Double. MAX)" "(Double. 3)" "(Double. toString)" "(Double. 2 toString)" "(Double. toString 1)" "(. Double 2)" "(. Double new 2)" "(. Date)" "(. Date new)" "(Date.)" "(java.lang.Double 2)" "(java.lang.Double. 2)" "(java.lang.Double. new 1)" "(new java.lang.Double )" "(new java.lang.Double 2)" "(Double 2.3)" "(. toUpper \\"elo\\")" "(. toUpperCase \\"elo\\")" "(.toUpperCase \\"elo\\")" "Double/POSITIVE_INFINITY" "(> Double/POSITIVE_INFINITY 2)" "(go-find-food 10 1)" "(> Double/POSITIVE_INFINITY 2)" "(go-find-food 10 1)" "edges-g" "(go-find-food 10 1)" "(class (go-find-food 10 1))" "(go-find-food 10 1)" "max-current-pher" "(go-find-food 10 1)" "(setup-vertexes 10)" "(make-random-edges 2)" "(get-positions-list)" "(set-food [198 8])" "(go-find-food 100 10000)" "(reset\! max-current-pher 1.0)" "(go-find-food 100 10000)" "edges-g" "(go-find-food 100 10000)" "edges-g" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "edges-g" "(setup-vertexes 10)" "(make-random-edges 2)" "edges-g" "max-current-pher" "(reset\! max-current-pher initial-pheromone)" "(Math/floor (* (/ @max-current-pher 225) initial-pheromone))" "(go-find-food 100 4)" "(go-find-food 100 4000)" "(go-find-food 100 400000)" "(go-find-food 100 400000000)" "(go-find-food 100 40000000000000)" "(go-find-food 100 4000)" "(go-find-food 100 40000)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 100 40000)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 40000)" "(reset max-current-pher initial-pheromone)" "(reset\! max-current-pher initial-pheromone)" "(map \#(reset\! % initial-pheromone ) @edges-g)" "(go-find-food 40 40000)" "(map \#(reset\! % initial-pheromone ) @edges-g)" "(reset\! max-current-pher initial-pheromone)" "(scale-colour initial-pheromone)" "(go-find-food 40 40000)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 40000)" "(go-find-food 40 1)" "(go-find-food 40 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(scale-colour initial-pheromone)" "(go-find-food 40 1000)" "(scale-colour initial-pheromone)" "edges-g" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 1000)" "edges-g" "(scale-colour initial-pheromone)" "(go-find-food 40 1000)" "(scale-colour initial-pheromone)" "(go-find-food 40 10000)" "(scale-colour initial-pheromone)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 10000)" "(scale-colour initial-pheromone)" "(go-find-food 40 10000)" "(go-find-food 40 1000000)" "(go-find-food 40 10000)" "(- 1 evaporation-rate)" "edges-g" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 10000)" "(go-find-food 40 100000)" "(scale-colour initial-pheromone)" "edges-g" "(go-find-food 40 100000)" "(reset\! max-current-pher initial-pheromone)" "(map \#(reset\! % initial-pheromone) edges-g)" "(map \#(reset\! % initial-pheromone) @edges-g)" "(go-find-food 40 100000)" "edges-g" "(go-find-food 40 100000)" "(go-find-food 40 1)" "(go-find-food 40 10)" "(- 1 evaporation-rate)" "(scale-colour init)" "(scale-colour initial-pheromone)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 10000)" "(go-find-food 40 100000)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(setup-vertexes 10)" "(make-random-edges 2)" "(go-find-food 40 100000)" "(setup-vertexes 2)" "(setup-vertexes 10\\n                )" "(make-random-edges 2)" "(setup-vertexes 10\\n                )" "(make-random-edges 2)" "(go-find-food 50 100000)" "(get-positions-list)" "(reset\! max-current-pher initial-pheromone)" "(map (fn [a] (reset\! a initial-pheromone) @edges-g))" "(map (fn [a] (reset\! a initial-pheromone)) @edges-g)" "(go-find-food 50 10000)" "(go-find-food 50 100000)" "edges-g" "(go-find-food 50 100000)" "(reset-pheromones)" "edges-g" "(reset-edges 2)" "@vertexes" "(\:pos (first @vertexes))" "(second (first @vertexes))" "(reset-edges 2)" "(make-random-edge)" "(make-random-edge [23 4] [2 4])" "(make-random-edge [23 4])" "(make-random-edges 1)" "(make-random-edges 2)" "(make-random-edges 23)" "\\n(reset-edges 2)" "\\n(reset-edges 1)" "\\n(reset-edges 0)" "\\n(reset-edges 4)" "\\n(reset-edges 2)" "(reset-edges 2)" "edges-g" "@vertexes" "(count @edges-g\\n       )" "(go-find-food 40 10000)" "(go-find-food 40 100000)" "(reset-pheromones)" "(go-find-food 40 100000)" "3" "(reset-edges 2)" "@vertexes" "edges-g" "@vertexes" "(max (map deref @edges-g))" "(map deref @edges-g)" "(max 1  23 43 24 )" "(max (map deref @edges-g))" "(max (doall (map deref @edges-g)))" "(def q (map deref @edges-g))" "q" "(max q)" "(class q)" "(apply max q)" "(go-find-food 30 100000)" "(reset-pheromones)" "(go-find-food 30 100000)" "(reset-edges 2)" "edges-g" "(reset-edges 2)" "(go-find-food 30 100000)" "(reset-pheromones)" "(go-find-food 30 100000)" "(reset-edges 2)" "(go-find-food 30 100000)" "(setup-vertexes 10)" "(setup-vertexes 10 2)" "(reset-edges 2)" "(setup-vertexes 10 2)" "(reset-edges 2)" "(setup-vertexes 10 2)" "(setup-vertexes 10 \\n                )" "(setup-vertexes 10 \\n                2)" "(setup-vertexes 10 \\n                )" "(go-find-food 30 10000)" "(go-find-food 30 50000)"]
eclipse.preferences.version=1
